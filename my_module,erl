% ████████████████████████████████████████████████████████████████
% █ Nombre del Archivo:  my_module.erl                                 
% █ Autor:              Angel Albino Garcia Cerrillo                
% █ Correo:             l21211948@tectijuana.edu.mx                   
% █ Fecha:              06/09/2024                                    
% █ Curso:              Programacion logica y funcional, TECNM Campus ITT       
% █ Unidad:             1                                                                      
% █ Objetivo:                                                       
% █         ╔═══════════════════════════════════════════════════════════╗
% █         ║ Ejercicio 21 intercambiar valores entre funciones         ║
% █         ║                                                           ║
% █         ╚═══════════════════════════════════════════════════════════╝                     
% █                                                               
% █                            
% ████████████████████████████████████████████████████████████████

-module(my_module).
-export([fun1/2, fun2/2, something/0, now/3, and_fun/3, moving/0]).

%% Implementación de fun1
fun1(A, B) ->
    something(),
    fun2(B, A).

%% Implementación de fun2
fun2(A, B) ->
    now(A, is, B),
    and_fun(B, is, A),
    moving().

%% Implementación de something/0
something() ->
    io:format("Doing something~n").

%% Implementación de now/3
now(A, is, B) ->
    io:format("Now: ~p is ~p~n", [A, B]).

%% Implementación de and_fun/3
and_fun(A, is, B) ->
    io:format("And: ~p is ~p~n", [A, B]).

%% Implementación de moving/0
moving() ->
    io:format("Keep moving~n").
